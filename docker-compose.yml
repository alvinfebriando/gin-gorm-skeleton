version: "3.9"

services:
  rest:
    container_name: ${REST_CONTAINER_NAME}
    build: .
    ports:
      - "8080:8080"
    env_file:
      - .env
    networks:
      network:
    depends_on:
      database:
        condition: service_healthy
    links:
      - "database"

  rest_dev:
    container_name: ${REST_DEV_CONTAINER_NAME}
    build:
      context: .
      target: "watch"
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      APP_ENV: dev
      APP_HOST: rest_dev
      APP_PORT: 8000
    networks:
      network:
    depends_on:
      database:
        condition: service_healthy
    links:
      - database
    volumes:
      - ./:/app

  database:
    image: postgres:16-alpine
    container_name: ${POSTGRES_CONTAINER_NAME}
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d skeleton_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - volume:/var/lib/postgresql/data
    networks:
      network:

  migration:
    container_name: ${MIGRATION_CONTAINER_NAME}
    build:
      context: .
      target: "migration"
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
    networks:
      network:
    links:
      - "database"

volumes:
  volume:

networks:
  network:
    driver: bridge